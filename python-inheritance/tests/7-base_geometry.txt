>>> BaseGeometry = __import__('7-base_geometry').BaseGeometry


>>> a = BaseGeometry()
>>> a.area()
Traceback (most recent call last):
Exception: area() is not implemented

>>> a = BaseGeometry()
>>> a.integer_validator("Height", "not a number")
Traceback (most recent call last):
TypeError: Height must be an integer
>>> a = BaseGeometry()
>>> a.integer_validator("Height", -50)
Traceback (most recent call last):
ValueError: Height must be greater than 0
>>> a.integer_validator()
Traceback (most recent call last):
TypeError: integer_validator() missing 2 required positional arguments: 'name' and 'value'
>>> a.integer_validator("me")
Traceback (most recent call last):
TypeError: integer_validator() missing 1 required positional argument: 'value'
>>> a.integer_validator("me", True)
Traceback (most recent call last):
TypeError: me must be an integer
>>> a.integer_validator("me", None)
Traceback (most recent call last):
TypeError: me must be an integer
>>> a.integer_validator("yo", {3, 4})
Traceback (most recent call last):
TypeError: yo must be an integer
>>> a.integer_validator("hi", 0)
Traceback (most recent call last):
ValueError: hi must be greater than 0
>>> a.integer_validator("yo", 1)
>>> a.integer_validator("yo", [3])
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
File "/root/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
raise TypeError(f"{name} must be an integer")
TypeError: yo must be an integer
>>> a.integer_validator("yo", (4,))
Traceback (most recent call last):
File "<stdin>", line 1, in <module>
File "/root/holbertonschool-higher_level_programming/python-inheritance/7-base_geometry.py", line 15, in integer_validator
raise TypeError(f"{name} must be an integer")
TypeError: yo must be an integer